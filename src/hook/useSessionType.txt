import {
  createStore,
  createSubscriber,
  createHook,
  createContainer,
  Action,
} from 'react-sweet-state';

declare var alert: (message?: any) => void;

type userDataSchema = {
  id: string;
  firstName: string;
  lastName: string;
  profile: null;
  login: string;
  language: string;
  country: string;
  defaultStartedPage: string;
  defaultArticleCategorie: string;
  allowNotifications: boolean;
};

type StateSchema = {
  isLogin: boolean;
  userData: userDataSchema | null;
  stepLogin: number;
  loading: boolean;
  openLogin: boolean;
};
type ActionsSchema = typeof actions;

const validateEmail = (email: {
  match(arg0: RegExp): unknown;
  email: string;
}) => {
  return email.match(
    /^(?=.{1,254}$)(?=.{1,64}@)[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,
  );
};

const initialState: StateSchema = {
  isLogin: false,
  userData: null,
  stepLogin: 1,
  loading: false,
  openLogin: false,
};

const actions = {
  setLogin:
    (isLogin: boolean): Action<StateSchema> =>
    ({setState}) => {
      setState({
        isLogin,
      });
    },
  setUserData:
    (userData: userDataSchema): Action<StateSchema> =>
    ({setState}) => {
      setState({
        userData,
      });
    },
  setStepLogin:
    (step: number): Action<StateSchema> =>
    ({setState}) => {
      setState({
        stepLogin: step,
      });
    },
  setLoading:
    (loading: boolean): Action<StateSchema> =>
    ({setState}) => {
      setState({
        loading,
      });
    },
  setOpenLogin:
    (openLogin: boolean): Action<StateSchema> =>
    ({setState}) => {
      setState({
        openLogin,
      });
    },
};

// const Store = createStore({
//   initialState: {
//     isLogin: false,
//     userData: null,
//     stepLogin: 1,
//     loading: false,
//     openLogin: false,
//   },
//   actions: {
//     setLogin:
//       isLogin =>
//       ({setState}) => {
//         setState({
//           isLogin,
//         });
//       },
//     setUserData:
//       userData =>
//       ({setState}) => {
//         setState({
//           userData,
//         });
//       },
//     setStepLogin:
//       step =>
//       ({setState}) => {
//         setState({
//           stepLogin: step,
//         });
//       },
//     setLoading:
//       loading =>
//       ({setState}) => {
//         setState({
//           loading,
//         });
//       },
//     setOpenLogin:
//       openLogin =>
//       ({setState}) => {
//         setState({
//           openLogin,
//         });
//       },
//   },
// });

const CounterContainer = createContainer();

const Store = createStore<StateSchema, ActionsSchema>({
  initialState,
  actions,
  containedBy: CounterContainer,
});

export default function useSession() {
  const CounterSubscriber = createSubscriber(Store);
  const loginStore = createHook(Store);
  const [
    {isLogin, userData, stepLogin, loading, openLogin},
    {setLoading, setLogin, setUserData, setStepLogin, setOpenLogin},
  ] = loginStore();

  const userVerifyMail = async (email: {
    match(arg0: RegExp): unknown;
    email: string;
  }) => {
    setLoading(true);
    if (email) {
      if (validateEmail(email)) {
        const options = {
          method: 'POST',
          headers: {'Content-Type': 'application/json'},
          body: JSON.stringify({login: email}),
        };

        const login = await fetch(
          'https://lepiant-login.deno.dev/login',
          options,
        )
          .then(response => response.json())
          .then(response => response)
          .catch(err => console.error(err));

        if (login?.success) {
          setStepLogin(2);
          setLoading(false);
        } else {
          setLoading(false);
          alert("Une erreur s'est produite. RÃ©essayez plus tard.");
        }
      } else {
        alert("L'adresse email n'est pas valide!");
      }
    } else {
      alert('Entrer un adresse email svp');
    }
  };

  const userVerifyOTP = async (inputCode: any) => {
    setLoading(true);
    if (inputCode) {
      const options = {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({code: inputCode}),
      };

      const user = await fetch(
        'https://lepiant-login.deno.dev/verifyOTP',
        options,
      )
        .then(response => response.json())
        .catch(err => console.error(err));

      if (user?.success) {
        setLoading(false);
        getUserSession();
      } else {
        alert('Code no valide!');
        setLoading(false);
      }
    } else {
    }
  };

  const getUserSession = async () => {
    setUserData({
      id: '0a042b60-9dc3-42f5-8cbd-fccad6f23ef9',
      firstName: 'babacar',
      lastName: 'saady',
      profile: null,
      login: 'mbayebabssow@gmail.com',
      language: 'fr',
      country: 'sn',
      defaultStartedPage: 'news',
      defaultArticleCategorie: '7c2471e9-9f9f-4919-b4dc-502031e38d14',
      allowNotifications: true,
    });
    setLogin(true);
    // const dataOnStore = await getDataOnStore("user_session");

    // if (!dataOnStore) return;
    // const user = JSON.parse(dataOnStore);
    // if (!user.id) return;
    // setUserData(user);
    // setLogin(true);
  };

  const updateUserSession = async (data: any) => {
    setLoading(true);

    const options = {
      method: 'POST',
      headers: {'Content-Type': 'application/json'},
      body: JSON.stringify(data),
    };

    const response = await fetch(
      `https://lepiant-login.deno.dev/updateUser/${
        (userData as {id: string}).id
      }`,
      options,
    )
      .then(response => response.json())
      .catch(err => console.error(err));

    const user = response.success ? response.user : null;

    if (user?.success) {
      setUserData(user.user);
    }
    setLoading(false);
  };

  return {
    isLogin,
    userData,
    stepLogin,
    loading,
    openLogin,
    setOpenLogin,
    userVerifyMail,
    userVerifyOTP,
    getUserSession,
    updateUserSession,
  };
}
